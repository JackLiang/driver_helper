<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:aop="http://www.springframework.org/schema/aop"
   xmlns:p="http://www.springframework.org/schema/p"
   xmlns:tx="http://www.springframework.org/schema/tx" 
   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xmlns:context="http://www.springframework.org/schema/context"
   xsi:schemaLocation="http://www.springframework.org/schema/beans 
					   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
					   http://www.springframework.org/schema/aop 
					   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
					   http://www.springframework.org/schema/context 
					   http://www.springframework.org/schema/context/spring-context-3.0.xsd  
					   http://www.springframework.org/schema/mvc  
					   http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
					   http://www.springframework.org/schema/tx 
					   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<context:annotation-config />
	
	<!-- 公共上下文环境，排除MVC的Controller -->
	<context:component-scan base-package="com.dh">
		<context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation" /> 
 	</context:component-scan>
 
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">  
	       <list>  
	          <value>file:/data/dh/conf/jdbc.properties</value>  
	         <!--  <value>file:/data/dh/conf/redis.properties</value>   -->
	        </list>  
	    </property> 
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	    <property name="driverClass" value="${db.driverClassName}"/>
	    <property name="jdbcUrl" value="${db.url}"/>
	    <property name="user" value="${db.username}"/>
	    <property name="password" value="${db.password}"/>
	    <property name="initialPoolSize" value="${db.initialPoolSize}"/>
	    <property name="minPoolSize" value="${db.minPoolSize}"/>
	    <property name="maxPoolSize" value="${db.maxPoolSize}"/>
    	<property name="maxIdleTime" value="${db.maxIdleTime}"/>
    	<property name="idleConnectionTestPeriod" value="${db.idleConnectionTestPeriod}"/>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:config/mybatis/mapper/**/*.xml" />
	</bean>

	<!-- scope 这里配置prototype，否则关闭报错，还需查明原因 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!-- 自动批处理 -->
		<!-- <constructor-arg index="1" value="BATCH" /> -->
	</bean>

	<!-- Mapper接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dh.dao.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- 事务管理 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:annotation-driven transaction-manager="txManager" />
	
	
	<!-- Redis 部分 开始 -->
	<!-- Redis 连接参数配置 -->
  <!--   <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"> -->
    	<!-- 最大连接数 -->
        <!-- <property name="maxTotal" value="${redis.maxTotal}" /> -->
        <!-- 最大空闲连接数 -->
       <!--  <property name="maxIdle" value="${redis.maxIdle}" /> -->
        <!-- 获取连接时的最大等待毫秒数 -->
       <!--  <property name="maxWaitMillis" value="${redis.maxWaitMillis}"/> -->
   <!--  </bean> -->
    
	<!-- AccessToken、 CardApiTicket、JsApiTicket 缓存库-->
<!-- 	<bean id="shardedJedisPool0" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1">
            <list>
                <bean name="master" class="redis.clients.jedis.JedisShardInfo">
                	使用URI方式初始化，可以指定数据库dbindex ：redis://host:port/dbindex
                	数据库，必须指定。共16个库，按业务指定：fenxiao使用0~9，fenxiao-admin使用 10~13，第14、15留作他用
                	业务内可以尽量使用同一个库
                    <constructor-arg index="0" value="redis://${redis.host}:${redis.port}/0" type="java.net.URI"/>
                </bean>
                slave 暂无 
                <bean name="slaver" class="redis.clients.jedis.JedisShardInfo">
                </bean>
               
            </list>
        </constructor-arg>
    </bean> -->
    
    <!-- 用户静态数据缓存库 -->
<!--     <bean id="shardedJedisPool1" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1">
            <list>
                <bean name="master" class="redis.clients.jedis.JedisShardInfo">
                	使用URI方式初始化，可以指定数据库dbindex ：redis://host:port/dbindex
                	数据库，必须指定。共16个库，按业务指定：fenxiao使用0~9，fenxiao-admin使用 10~13，第14、15留作他用
                	业务内可以尽量使用同一个库
                    <constructor-arg index="0" value="redis://${redis.host}:${redis.port}/1" type="java.net.URI"/>
                </bean>
                slave 暂无 
                <bean name="slaver" class="redis.clients.jedis.JedisShardInfo">
                </bean>
               
            </list>
        </constructor-arg>
    </bean> -->
	<!-- Redis 部分 结束 -->

		<!-- 配置上传处理器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8" />  
        <property name="maxUploadSize" value="31457280" />  
        <property name="maxInMemorySize" value="40960" />  
    </bean>
	
</beans>